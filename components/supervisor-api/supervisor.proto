syntax = "proto3";

package supervisor;

import "google/api/annotations.proto";

option go_package = "api";

// BackupService provides workspace-facing, backup related services
service BackupService {

    // Prepare prepares a workspace backup and is intended to be called by the PreStop
    // hook of the container. It should hardly ever be neccesary to call this from any
    // other point.
    rpc Prepare(PrepareBackupRequest) returns (PrepareBackupResponse) {
        option (google.api.http) = {
            get: "/v1/backup/prepare"
        };
    }
    
}

// StatusService provides status feedback for the various in-workspace services.
service StatusService {

    // SupervisorStatus returns once supervisor is running.
    rpc SupervisorStatus(SupervisorStatusRequest) returns (SupervisorStatusResponse) {
        option (google.api.http) = {
            get: "/v1/status/supervisor"
        };
    }

    // IDEStatus returns OK if the IDE can serve requests.
    rpc IDEStatus(IDEStatusRequest) returns (IDEStatusResponse) {
        option (google.api.http) = {
            get: "/v1/status/ide"
        };
    }

    // BackupStatus offers feedback on the workspace backup status. This status information can
    // be relayed to the user to provide transparency as to how "safe" their files/content
    // data are w.r.t. to being lost.
    rpc BackupStatus(BackupStatusRequest) returns (BackupStatusResponse) {
        option (google.api.http) = {
            get: "/v1/status/backup"
        };
    }

    // ContentStatus returns the status of the workspace content. When used with `wait`, the call
    // returns when the content has become available.
    rpc ContentStatus(ContentStatusRequest) returns (ContentStatusResponse) {
        option (google.api.http) = {
            get: "/v1/status/content",
            additional_bindings {
                get: "/v1/status/content/wait/{wait=true}",
            }
        };
    }

}

message PrepareBackupRequest {}
message PrepareBackupResponse {}

message SupervisorStatusRequest {}
message SupervisorStatusResponse {
    bool ok = 1;
}

message IDEStatusRequest {}
message IDEStatusResponse {
    bool ok = 1;
}

message BackupStatusRequest {}
message BackupStatusResponse {
    bool canary_available = 1;
}

message ContentStatusRequest {
    // if true this request will return either when it times out or when the workspace content 
    // has become available.
    bool wait = 1;
}

message ContentStatusResponse {
    // true if the workspace content is available
    bool available = 1;

    // source indicates where the workspace content came from
    ContentSource source = 2;
}

enum ContentSource {
    from_other = 0;
    from_backup = 1;
    from_prebuild = 2;
}
